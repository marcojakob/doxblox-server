// Auto-generated from editable_label.html.
// DO NOT EDIT.

library x_editable_label;

import 'dart:html' as autogenerated_html;
import 'dart:web_audio' as autogenerated_audio;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'dart:html';

import '../packages/web_ui/web_ui.dart';

class EditableLabel extends WebComponent {
  
  /** Autogenerated from the template. */
  
  /**
  * Shadow root for this component. We use 'var' to allow simulating shadow DOM
  * on browsers that don't support this feature.
  */
  var _root;
  autogenerated_html.Element __e14;
  
  List<autogenerated.WatcherDisposer> __stoppers1;
  
  autogenerated_html.Node _endPosition__e14;
  
  bool _isVisible__e14 = false;
  
  autogenerated_html.LabelElement __e13;
  
  autogenerated_html.EventListener __listener__e13_doubleClick_2_1;
  
  var __binding12;
  
  List<autogenerated.WatcherDisposer> __stoppers3_2;
  
  autogenerated_html.Element __e16;
  
  autogenerated_html.Node _endPosition__e16;
  
  bool _isVisible__e16 = false;
  
  autogenerated_html.FormElement __e15;
  
  autogenerated_html.EventListener __listener__e15_submit_4_1;
  
  autogenerated_html.InputElement __edit;
  
  autogenerated_html.EventListener __listener__edit_blur_5_2;
  
  autogenerated_html.EventListener __listener__edit_keyUp_6_3;
  
  List<autogenerated.WatcherDisposer> __stoppers7_4;
  
  EditableLabel.forElement(e) : super.forElement(e);
  
  void created_autogenerated() {
    _root = createShadowRoot();
    
    if (_root is autogenerated_html.ShadowRoot) _root.applyAuthorStyles = true;
    
    _root.innerHtml = '''
    
    <template id="__e-14" style="display:none"></template>
    <template id="__e-16" style="display:none"></template>
    ''';
    __e14 = _root.query('#__e-14');
    __stoppers1 = [];
    __e16 = _root.query('#__e-16');
    
  }
  
  void inserted_autogenerated() {
    _endPosition__e14 = __e14;
    
    __stoppers1.add(autogenerated.watchAndInvoke(() => !editing, (__e) {
      bool showNow = __e.newValue;
      if (_isVisible__e14 && !showNow) {
        _isVisible__e14 = false;
        
        __e13.on.doubleClick.remove(__listener__e13_doubleClick_2_1);
        __listener__e13_doubleClick_2_1 = null;
        
        __e13 = null;
        (__stoppers3_2..forEach((s) => s())).clear();
        __binding12 = null;
        
        _endPosition__e14 = autogenerated.removeNodes(__e14, _endPosition__e14);
        
      } else if (!_isVisible__e14 && showNow) {
        
        _isVisible__e14 = true;
        
        __e13 = new autogenerated_html.Element.html('<label class="edit-label"></label>');
        __binding12 = new autogenerated_html.Text('');
        __stoppers3_2 = [];
        __e13.nodes.add(__binding12);
        
        autogenerated.insertAllBefore(__e14.parentNode, __e14.nextNode,
        
        [new autogenerated_html.Text('\n      '), __e13, _endPosition__e14 = new autogenerated_html.Text('\n    ')]);
        
        __listener__e13_doubleClick_2_1 = ($event) {
          edit();
          autogenerated.dispatch();
        };
        __e13.on.doubleClick.add(__listener__e13_doubleClick_2_1);
        
        __stoppers3_2.add(autogenerated.watchAndInvoke(() => '${value}', (__e) {
          __binding12 = autogenerated.updateBinding(value, __binding12, __e.newValue);
        }));
        
      }
    }));
    
    _endPosition__e16 = __e16;
    
    __stoppers1.add(autogenerated.watchAndInvoke(() => editing, (__e) {
      bool showNow = __e.newValue;
      if (_isVisible__e16 && !showNow) {
        _isVisible__e16 = false;
        
        __e15.on.submit.remove(__listener__e15_submit_4_1);
        __listener__e15_submit_4_1 = null;
        
        __e15 = null;
        (__stoppers7_4..forEach((s) => s())).clear();
        __edit.on.blur.remove(__listener__edit_blur_5_2);
        __listener__edit_blur_5_2 = null;
        
        __edit.on.keyUp.remove(__listener__edit_keyUp_6_3);
        __listener__edit_keyUp_6_3 = null;
        
        __edit = null;
        
        _endPosition__e16 = autogenerated.removeNodes(__e16, _endPosition__e16);
        
      } else if (!_isVisible__e16 && showNow) {
        
        _isVisible__e16 = true;
        
        __e15 = new autogenerated_html.Element.html('<form>\n        <input id="edit" class="edit ">\n      </form>');
        __edit = __e15.query('#edit');
        __stoppers7_4 = [];
        
        autogenerated.insertAllBefore(__e16.parentNode, __e16.nextNode,
        
        [new autogenerated_html.Text('\n      '), __e15, _endPosition__e16 = new autogenerated_html.Text('\n    ')]);
        
        __listener__e15_submit_4_1 = ($event) {
          update($event);
          autogenerated.dispatch();
        };
        __e15.on.submit.add(__listener__e15_submit_4_1);
        
        __listener__edit_blur_5_2 = ($event) {
          update($event);
          autogenerated.dispatch();
        };
        __edit.on.blur.add(__listener__edit_blur_5_2);
        
        __listener__edit_keyUp_6_3 = ($event) {
          maybeCancel($event);
          autogenerated.dispatch();
        };
        __edit.on.keyUp.add(__listener__edit_keyUp_6_3);
        
        __stoppers7_4.add(autogenerated.bindCssClasses(__edit, () => editing ? 'editing' : ''));
        
      }
    }));
    
  }
  
  void removed_autogenerated() {
    _root = null;
    
    (__stoppers1..forEach((s) => s())).clear();
    
    if (_isVisible__e14) {
      
      _endPosition__e14 = autogenerated.removeNodes(__e14, _endPosition__e14);
      
      __e13.on.doubleClick.remove(__listener__e13_doubleClick_2_1);
      __listener__e13_doubleClick_2_1 = null;
      
      __e13 = null;
      (__stoppers3_2..forEach((s) => s())).clear();
      __binding12 = null;
      
    }
    
    __e14 = null;
    
    if (_isVisible__e16) {
      
      _endPosition__e16 = autogenerated.removeNodes(__e16, _endPosition__e16);
      
      __e15.on.submit.remove(__listener__e15_submit_4_1);
      __listener__e15_submit_4_1 = null;
      
      __e15 = null;
      (__stoppers7_4..forEach((s) => s())).clear();
      __edit.on.blur.remove(__listener__edit_blur_5_2);
      __listener__edit_blur_5_2 = null;
      
      __edit.on.keyUp.remove(__listener__edit_keyUp_6_3);
      __listener__edit_keyUp_6_3 = null;
      
      __edit = null;
      
    }
    
    __e16 = null;
    
  }
  
  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated_html.ShadowRoot) _root = this;
  }
  
  /** Original code from the component. */
  
  bool editing;
  String value;
  
  InputElement get _editBox => _root.query('#edit');
  
  void created() {
    super.created();
    editing = false;
    value = '';
  }
  
  void edit() {
    editing = true;
    dispatch();
    
    // For IE and Firefox: use .focus(), then reset the value to move the
    // cursor to the end.
    _editBox.focus();
    _editBox.value = '';
    _editBox.value = value;
  }
  
  void update(Event e) {
    e.preventDefault(); // don't submit the form
    if (!editing) return; // bail if user canceled
    value = _editBox.value;
    editing = false;
  }
  
  void maybeCancel(KeyboardEvent e) {
    if (e.keyCode == KeyCode.ESC) {
      editing = false;
    }
  }
}

